xlab("Qualitative variables") +
scale_fill_hue(name="Type of eye tracking")
dataset %>% filter(type_eye_tracking == c("total_perceived_usefulness", "total_perceived_ease_of_use", "total_intention_to_use")) %>%
group_by(type_eye_tracking) %>%
ggplot() +
geom_boxplot(aes(x=type_eye_tracking, y=value ,fill = type_eye_tracking)) +
theme_minimal() +
theme(legend.position="bottom") +
ylab("Values (Likert scale)") +
xlab("Qualitative variables") +
scale_fill_hue(name="Type of eye tracking")
dataset %>% filter(type_eye_tracking == c("total_perceived_usefulness", "total_perceived_ease_of_use", "total_intention_to_use")) %>%
group_by(type_eye_tracking) %>%
ggplot() +
geom_boxplot(aes(x=type_eye_tracking, y=total_perceived_usefulness ,fill = type_eye_tracking)) +
theme_minimal() +
theme(legend.position="bottom") +
ylab("Values (Likert scale)") +
xlab("Qualitative variables") +
scale_fill_hue(name="Type of eye tracking")
dataset %>% filter(type_eye_tracking == total_perceived_usefulness) %>%
group_by(type_eye_tracking) %>%
ggplot() +
geom_boxplot(aes(x=type_eye_tracking, y=total_perceived_usefulness ,fill = type_eye_tracking)) +
theme_minimal() +
theme(legend.position="bottom") +
ylab("Values (Likert scale)") +
xlab("Qualitative variables") +
scale_fill_hue(name="Type of eye tracking")
dataset %>% filter(type_eye_tracking == total_perceived_usefulness) %>%
ggplot() +
geom_boxplot(aes(x=type_eye_tracking, y=total_perceived_usefulness ,fill = type_eye_tracking)) +
theme_minimal() +
theme(legend.position="bottom") +
ylab("Values (Likert scale)") +
xlab("Qualitative variables") +
scale_fill_hue(name="Type of eye tracking")
dataset
dataset %>%
ggplot() +
geom_boxplot(aes(x = type_eye_tracking, y = total_perceived_usefulness, fill = type_eye_tracking)) +
theme_minimal() +
theme(legend.position="bottom") +
ylab("Values (Likert scale)") +
xlab("Qualitative variables") +
scale_fill_hue(name="Type of eye tracking")
#
dataset %>%
ggplot() +
geom_boxplot(aes(x = type_eye_tracking, y = total_perceived_usefulness, fill = type_eye_tracking)) +
theme_minimal() +
theme(legend.position="bottom") +
ylab("Values (Likert scale)") +
xlab("Qualitative variables") +
scale_fill_hue(name="Type of eye tracking")
dataset %>%
ggplot() +
geom_boxplot(aes(x = type_eye_tracking, y = total_perceived_usefulness, fill = type_eye_tracking)) +
theme_minimal() +
theme(legend.position="bottom") +
ylab("Value (Likert scale)") +
xlab("Qualitative variables") +
scale_fill_hue(name="Type of eye tracking")
dataset %>%
ggplot() +
geom_boxplot(aes(x = type_eye_tracking, y = total_perceived_usefulness, fill = type_eye_tracking)) +
theme_minimal() +
theme(legend.position="bottom") +
ylab("Likert scale (1-5)") +
xlab("Total Perceived Usefulness") +
scale_fill_hue(name="Type of eye tracking")
dataset %>%
ggplot() +
geom_boxplot(aes(x = type_eye_tracking, y = total_perceived_usefulness, fill = type_eye_tracking)) +
theme_minimal() +
theme(legend.position="bottom") +
ylab("Likert scale (1-5)") +
xlab("Total Perceived Usefulness") +
scale_fill_hue(name="Type of eye tracking")
dataset %>%
ggplot() +
geom_boxplot(aes(x = type_eye_tracking, y = total_perceived_usefulness, fill = type_eye_tracking)) +
theme_minimal() +
theme(legend.position="bottom") +
ylab("Likert scale (1-5)") +
xlab("Total Perceived Usefulness") +
scale_fill_hue(name="Type of eye tracking")
dat.m
dataset.blinking
dat.m %>% filter(variable == c("total_perceived_usefulness", "total_perceived_ease_of_use", "total_intention_to_use")) %>%
group_by(type_eye_tracking) %>%
ggplot() +
geom_boxplot(aes(x=type_eye_tracking, y=total_perceived_usefulness ,fill = type_eye_tracking)) +
theme_minimal() +
facet_wrap(~ variable, scales = "free", labeller = names) +
theme(legend.position="bottom") +
ylab("Values (Likert scale)") +
xlab("Qualitative variables") +
scale_fill_hue(name="Type of eye tracking")
dat.m
dat.m <- dat.m %>%
hablar::convert(cht(variable))
dat.m <- dat.m %>%
hablar::convert(chr(variable))
dat.m %>% filter(variable == c("total_perceived_usefulness", "total_perceived_ease_of_use", "total_intention_to_use")) %>%
group_by(type_eye_tracking) %>%
ggplot() +
geom_boxplot(aes(x=type_eye_tracking, y=total_perceived_usefulness ,fill = type_eye_tracking)) +
theme_minimal() +
facet_wrap(~ variable, scales = "free", labeller = names) +
theme(legend.position="bottom") +
ylab("Values (Likert scale)") +
xlab("Qualitative variables") +
scale_fill_hue(name="Type of eye tracking")
dat.m %>% filter(variable == c("total_perceived_usefulness", "total_perceived_ease_of_use", "total_intention_to_use")) %>%
group_by(type_eye_tracking) %>%
ggplot() +
geom_boxplot(aes(x=type_eye_tracking, y=value ,fill = type_eye_tracking)) +
theme_minimal() +
facet_wrap(~ variable, scales = "free", labeller = names) +
theme(legend.position="bottom") +
ylab("Values (Likert scale)") +
xlab("Qualitative variables") +
scale_fill_hue(name="Type of eye tracking")
names <- as_labeller(c(`total_perceived_usefulness` = "Total Perceived Usefulness", `total_perceived_ease_of_use` = "Total Perceived Ease of Use",`total_intention_to_use` = "Total Intention to Use"))
dat.m %>% filter(variable == c("total_perceived_usefulness", "total_perceived_ease_of_use", "total_intention_to_use")) %>%
group_by(type_eye_tracking) %>%
ggplot() +
geom_boxplot(aes(x=type_eye_tracking, y=value ,fill = type_eye_tracking)) +
theme_minimal() +
facet_wrap(~ variable, scales = "free", labeller = names) +
theme(legend.position="bottom") +
ylab("Values (Likert scale)") +
xlab("Qualitative variables") +
scale_fill_hue(name="Type of eye tracking")
dat.m
dat.m <- dat.m %>%
hablar::convert(chr(variable, type_eye_tracking))
names <- as_labeller(c(`total_perceived_usefulness` = "Total Perceived Usefulness", `total_perceived_ease_of_use` = "Total Perceived Ease of Use",`total_intention_to_use` = "Total Intention to Use"))
dat.m %>% filter(variable == c("total_perceived_usefulness", "total_perceived_ease_of_use", "total_intention_to_use")) %>%
group_by(type_eye_tracking) %>%
ggplot() +
geom_boxplot(aes(x=type_eye_tracking, y=value ,fill = type_eye_tracking)) +
theme_minimal() +
facet_wrap(~ variable, scales = "free", labeller = names) +
theme(legend.position="bottom") +
ylab("Values (Likert scale)") +
xlab("Qualitative variables") +
scale_fill_hue(name="Type of eye tracking")
names <- as_labeller(c(`total_time` = "Total Time",`total_accuracy` = "Total Accuracy", `precision` = "Precision"))
dat.m %>% filter(variable == c("total_time", "total_accuracy", "precision")) %>%
group_by(type_eye_tracking) %>%
ggplot() +
geom_boxplot(aes(x=type_eye_tracking, y=value, fill = type_eye_tracking)) +
ggplot() +
facet_wrap(~ variable, scales = "free", labeller = names) +
theme_minimal() +
theme(legend.position="bottom") +
ylab("Values of quantitative variables") +
xlab("Quantitative variables") +
scale_fill_hue(name="Type of eye tracking")
names <- as_labeller(c(`total_time` = "Total Time",`total_accuracy` = "Total Accuracy", `precision` = "Precision"))
dat.m %>% filter(variable == c("total_time", "total_accuracy", "precision")) %>%
group_by(type_eye_tracking) %>%
ggplot() +
geom_boxplot(aes(x=type_eye_tracking, y=value, fill = type_eye_tracking)) +
ggplot() +
facet_wrap(~ variable, scales = "free", labeller = names) +
theme_minimal() +
theme(legend.position="bottom") +
ylab("Values of quantitative variables") +
xlab("Quantitative variables") +
scale_fill_hue(name="Type of eye tracking")
names <- as_labeller(c(`total_time` = "Total Time",`total_accuracy` = "Total Accuracy", `precision` = "Precision"))
dat.m %>% filter(variable == c("total_time", "total_accuracy", "precision")) %>%
ggplot() +
geom_boxplot(aes(x=type_eye_tracking, y=value, fill = type_eye_tracking)) +
ggplot() +
facet_wrap(~ variable, scales = "free", labeller = names) +
theme_minimal() +
theme(legend.position="bottom") +
ylab("Values of quantitative variables") +
xlab("Quantitative variables") +
scale_fill_hue(name="Type of eye tracking")
names <- as_labeller(c(`total_time` = "Total Time",`total_accuracy` = "Total Accuracy", `precision` = "Precision"))
a <- dat.m %>% filter(variable == c("total_time", "total_accuracy", "precision")) %>%
ggplot() +
geom_boxplot(aes(x=type_eye_tracking, y=value, fill = type_eye_tracking)) +
ggplot() +
facet_wrap(~ variable, scales = "free", labeller = names) +
theme_minimal() +
theme(legend.position="bottom") +
ylab("Values of quantitative variables") +
xlab("Quantitative variables") +
scale_fill_hue(name="Type of eye tracking")
names <- as_labeller(c(`total_time` = "Total Time",`total_accuracy` = "Total Accuracy", `precision` = "Precision"))
a <- dat.m %>% filter(variable == c("total_time", "total_accuracy", "precision")) %>%
group_by(type_eye_tracking) %>%
ggplot() +
geom_boxplot(aes(x=type_eye_tracking, y=value, fill = type_eye_tracking)) +
facet_wrap(~ variable, scales = "free", labeller = names) +
theme_minimal() +
theme(legend.position="bottom") +
ylab("Values of quantitative variables") +
xlab("Quantitative variables") +
scale_fill_hue(name="Type of eye tracking")
names <- as_labeller(c(`total_time` = "Total Time",`total_accuracy` = "Total Accuracy", `precision` = "Precision"))
dat.m %>% filter(variable == c("total_time", "total_accuracy", "precision")) %>%
group_by(type_eye_tracking) %>%
ggplot() +
geom_boxplot(aes(x=type_eye_tracking, y=value, fill = type_eye_tracking)) +
facet_wrap(~ variable, scales = "free", labeller = names) +
theme_minimal() +
theme(legend.position="bottom") +
ylab("Values of quantitative variables") +
xlab("Quantitative variables") +
scale_fill_hue(name="Type of eye tracking")
dataset.gazing
dataset.blinking
summary(dataset.gazing)
dataset %>%
ggplot() +
geom_boxplot(aes(x = type_eye_tracking, y = total_accuracy, fill = type_eye_tracking)) +
theme_minimal() +
theme(legend.position="bottom") +
ylab("Likert scale (1-5)") +
xlab("Total Perceived Usefulness") +
scale_fill_hue(name="Type of eye tracking")
ggcorrplot(
corr,
p.mat = p.mat,
hc.order = TRUE,
type = "lower",
lab = TRUE,
insig = "blank"
)
ggcorrplot(
corr,
hc.order = TRUE,
type = "lower",
lab = TRUE,
)
names <- as_labeller(c(`total_time` = "Total Time",`total_accuracy` = "Total Accuracy", `precision` = "Precision"))
dat.m %>% filter(variable == c("total_time", "total_accuracy", "precision")) %>%
group_by(type_eye_tracking) %>%
ggplot() +
geom_boxplot(aes(x=type_eye_tracking, y=value, fill = type_eye_tracking)) +
facet_wrap(~ variable, scales = "free", labeller = names) +
theme_minimal() +
theme(legend.position="bottom") +
ylab("Values of quantitative variables") +
xlab("Quantitative variables") +
scale_fill_hue(name="Type of eye tracking")
dat.m
dat.m %>% filter(variable == "precision") %>%
ggplot() +
geom_boxplot(aes(x = type_eye_tracking, y = total_accuracy, fill = type_eye_tracking)) +
theme_minimal() +
theme(legend.position="bottom") +
ylab("Likert scale (1-5)") +
xlab("Total Perceived Usefulness") +
scale_fill_hue(name="Type of eye tracking")
dat.m %>% filter(variable == "precision") %>%
ggplot() +
geom_boxplot(aes(x = type_eye_tracking, y = value, fill = type_eye_tracking)) +
theme_minimal() +
theme(legend.position="bottom") +
ylab("Likert scale (1-5)") +
xlab("Total Perceived Usefulness") +
scale_fill_hue(name="Type of eye tracking")
dat.m <- melt(dataset)
dataset
dat.m
ggplot(data = dat.m, aes(x=variable, y=value)) +
geom_boxplot(aes(fill=type_eye_tracking))
dat.m %>% filter(variable == c("total_time", "total_accuracy", "precision")) %>%
ggplot(data = dat.m, aes(x=variable, y=value)) +
geom_boxplot(aes(fill=type_eye_tracking)) +
theme_minimal() +
theme(legend.position="bottom") +
ylab("Values of quantitative variables") +
xlab("Quantitative variables") +
scale_fill_hue(name="Type of eye tracking")
dat.m %>% filter(variable == c("total_time", "total_accuracy", "precision")) %>%
ggplot(aes(x=variable, y=value)) +
geom_boxplot(aes(fill=type_eye_tracking)) +
theme_minimal() +
theme(legend.position="bottom") +
ylab("Values of quantitative variables") +
xlab("Quantitative variables") +
scale_fill_hue(name="Type of eye tracking")
dat.m %>% filter(variable == c("total_time", "total_accuracy", "precision")) %>%
ggplot(aes(x=variable, y=value)) +
geom_boxplot(aes(fill=type_eye_tracking)) +
theme_minimal() +
theme(legend.position="bottom") +
ylab("Values of quantitative variables") +
xlab("Quantitative variables") +
scale_fill_hue(name="Type of eye tracking") +
facet_wrap( ~ variable, scales="free")
chi_intention <- chisq.test(table(type_eye_tracking, total_intention_to_use))
dataset_chisquare <- dataset %>%
mutate(type_eye_tracking = ifelse(type_eye_tracking == "Blinking", 1, 0))
# hsb2 <- within(read.csv("https://stats.idre.ucla.edu/stat/data/hsb2.csv"), {
#     race <- as.factor(race)
#     schtyp <- as.factor(schtyp)
#     prog <- as.factor(prog)
# })
attach(dataset)
chi_intention <- chisq.test(table(type_eye_tracking, total_intention_to_use))
chi_ease <- chisq.test(table(type_eye_tracking, total_perceived_ease_of_use))
chi_usefulness <- chisq.test(table(type_eye_tracking, total_perceived_usefulness))
chi_total_time <- chisq.test(table(type_eye_tracking, total_time))
chi_accuracy <- chisq.test(table(type_eye_tracking, total_accuracy))
chi_precision <- chisq.test(table(type_eye_tracking, precision))
chi_intention
chi_ease
chi_usefulness
chi_total_time
chi_accuracy
chi_precision
attach(dataset)
table(type_eye_tracking)
tab22 <-function(a,y){ table(a,y)
print(table(a,y))
options(digits=4)
print(prop.table(table(a,y),1)*100)
print(margin.table(table(a,y),1))
options(digits=7)
}
tab22(dataset$distance,type_eye_tracking)
tab22(dataset$total_perceived_usefulness,type_eye_tracking)
tab22(dataset$total_perceived_ease_of_use,type_eye_tracking)
tab22(dataset$total_intention_to_use,type_eye_tracking)
tab22(dataset$total_time,type_eye_tracking)
tab22(dataset$total_time_accuracy,type_eye_tracking)
tab22(dataset$total_perceived_usefulness,type_eye_tracking)
dataset.blinking
t.test(dataset.blinking["total_perceived_usefulness"],dataset.gazing["total_perceived_usefulness"])
t.test(as.vector(dataset.blinking["total_perceived_usefulness"]),as.vector(dataset.gazing["total_perceived_usefulness"]))
t.test(dataset.blinking$total_perceived_usefulness,dataset.gazing$total_perceived_usefulness)
t.test(dataset.blinking$total_perceived_ease_of_use,dataset.gazing$total_perceived_ease_of_use)
t.test(dataset.blinking$total_intention_to_use,dataset.gazing$total_intention_to_use)
# Quantitative
t.test(dataset.blinking$total_time,dataset.gazing$total_time)
t.test(dataset.blinking$total_accuracy,dataset.gazing$total_accuracy)
t.test(dataset.blinking$precision,dataset.gazing$precision)
# LOGISTIC REGRESSION MODEL
FullcovModel = glm(type_eye_tracking ~ distance + age + education + experience + total_perceived_usefulness + total_perceived_ease_of_use + total_intention_to_use + total_time + total_time_accuracy + total_accuracy + precision, data = dataset,family=binomial(link=logit))
# LOGISTIC REGRESSION MODEL
FullcovModel = glm(type_eye_tracking ~ total_perceived_usefulness + total_perceived_ease_of_use + total_intention_to_use + total_time + total_time_accuracy + total_accuracy + precision, data = dataset,family=binomial(link=logit))
dataset
# LOGISTIC REGRESSION MODEL
FullcovModel = glm(type_eye_tracking ~ total_perceived_usefulness + total_perceived_ease_of_use + total_intention_to_use + total_time + total_time_accuracy + total_accuracy + precision, data = dataset,family=binomial(link=logit))
# LOGISTIC REGRESSION MODEL
FullcovModel = glm(type_eye_tracking ~ total_perceived_usefulness + total_perceived_ease_of_use + total_intention_to_use + total_time + total_accuracy + precision, data = dataset,family=binomial(link=logit))
FullcovModel
summary(FullcovModel)
# LOGISTIC REGRESSION MODEL
FullcovModel = glm(type_eye_tracking ~ total_perceived_usefulness + total_perceived_ease_of_use + total_time + total_accuracy + precision, data = dataset,family=binomial(link=logit))
summary(FullcovModel)
# LOGISTIC REGRESSION MODEL
FullcovModel = glm(type_eye_tracking ~ total_perceived_usefulness + total_perceived_ease_of_use + total_accuracy + precision, data = dataset,family=binomial(link=logit))
summary(FullcovModel)
# LOGISTIC REGRESSION MODEL
FullcovModel = glm(type_eye_tracking ~ total_perceived_usefulness + total_intention_to_use+  total_perceived_ease_of_use + total_accuracy + precision, data = dataset,family=binomial(link=logit))
summary(FullcovModel)
# LOGISTIC REGRESSION MODEL
FullcovModel = mlogit(type_eye_tracking ~ total_perceived_usefulness + total_intention_to_use+  total_perceived_ease_of_use + total_accuracy + precision, data = dataset,family=binomial(link=logit))
contrast(type_eye_tracking)
FullcovModel_2 = glm(type_eye_tracking ~ distance + age + education + experience + total_perceived_usefulness + total_perceived_ease_of_use + total_intention_to_use, data = dataset,family=binomial(link=logit))
contrast(dataset$type_eye_tracking)
contrasts(dataset$type_eye_tracking)
# LOGISTIC REGRESSION MODEL
FullcovModel = glm(type_eye_tracking ~ total_perceived_usefulness + total_intention_to_use+  total_perceived_ease_of_use + total_accuracy + precision, data = dataset,family=binomial(link=logit))
summary(FullcovModel)
anova(FullcovModel, test="Chisq")
library(pscl)
install.packages("pscl")
library(pscl)
pR2(FullcovModel)
library(pscl)
pR2(FullcovModel)
chi_intention <- chisq.test(table(type_eye_tracking, total_intention_to_use))
library(aod)
library(arm)
require(nnet)
library(e1071)
library(dplyr)
library(hablar)
library(mlogit)
library(ggplot2)
library(ggcorrplot)
library(reshape2)
library(tidyverse)
# Import csv
dataset <- read_csv("data/measurements.csv", col_names = TRUE)
# Convert variables to factors
dataset <- dataset %>%
dplyr::select(type_eye_tracking, total_perceived_usefulness, total_perceived_ease_of_use, total_intention_to_use,total_time, total_accuracy, precision) %>%
convert(fct(type_eye_tracking))
# Delete first row
dataset <- dataset[-1,]
dataset.blinking <- dataset %>%
filter(type_eye_tracking == "Blinking")
dataset.gazing <- dataset %>%
filter(type_eye_tracking == "Gazing")
dat.m <- melt(dataset)
dat.g <- melt(dataset.gazing)
dat.b <- melt(dataset.blinking)
summary(dataset)
summary(dataset.blinking)
summary(dataset.gazing)
dat.m <- dat.m %>%
hablar::convert(chr(variable, type_eye_tracking))
names <- as_labeller(c(`total_perceived_usefulness` = "Total Perceived Usefulness", `total_perceived_ease_of_use` = "Total Perceived Ease of Use",`total_intention_to_use` = "Total Intention to Use"))
dat.m %>% filter(variable == c("total_perceived_usefulness", "total_perceived_ease_of_use", "total_intention_to_use")) %>%
group_by(type_eye_tracking) %>%
ggplot() +
geom_boxplot(aes(x=type_eye_tracking, y=value ,fill = type_eye_tracking)) +
theme_minimal() +
facet_wrap(~ variable, scales = "free", labeller = names) +
theme(legend.position="bottom") +
ylab("Values (Likert scale)") +
xlab("Qualitative variables") +
scale_fill_hue(name="Type of eye tracking")
names <- as_labeller(c(`total_time` = "Total Time",`total_accuracy` = "Total Accuracy", `precision` = "Precision"))
dat.m %>% filter(variable == c("total_time", "total_accuracy", "precision")) %>%
group_by(type_eye_tracking) %>%
ggplot() +
geom_boxplot(aes(x=type_eye_tracking, y=value, fill = type_eye_tracking)) +
facet_wrap(~ variable, scales = "free", labeller = names) +
theme_minimal() +
theme(legend.position="bottom") +
ylab("Values of quantitative variables") +
xlab("Quantitative variables") +
scale_fill_hue(name="Type of eye tracking")
# Box plots
dat.m %>% filter(variable == "precision") %>%
ggplot() +
geom_boxplot(aes(x = type_eye_tracking, y = value, fill = type_eye_tracking)) +
theme_minimal() +
theme(legend.position="bottom") +
ylab("Likert scale (1-5)") +
xlab("Total Perceived Usefulness") +
scale_fill_hue(name="Type of eye tracking")
dat.m %>% filter(variable == c("total_time", "total_accuracy", "precision")) %>%
ggplot(aes(x=variable, y=value)) +
geom_boxplot(aes(fill=type_eye_tracking)) +
theme_minimal() +
theme(legend.position="bottom") +
ylab("Values of quantitative variables") +
xlab("Quantitative variables") +
scale_fill_hue(name="Type of eye tracking") +
facet_wrap( ~ variable, scales="free")
# boxplot(dataset$total_perceived_ease_of_use, main="PE", sub=paste("Outlier rows: ", boxplot.stats(dataset$total_perceived_ease_of_use)$out))
#
# boxplot(dataset$total_intention_to_use, main="UI", sub=paste("Outlier rows: ", boxplot.stats(dataset$total_intention_to_use)$out))
#
# # Density plots
# plot(density(dataset$total_perceived_usefulness), main="Density Plot: total_perceived_usefulness", ylab="Frequency", sub=paste("Skewness:", round(e1071::skewness(dataset$total_perceived_usefulness), 2)))
#
# plot(density(dataset$total_perceived_ease_of_use), main="Density Plot: total_perceived_ease_of_use", ylab="Frequency", sub=paste("Skewness:", round(e1071::skewness(dataset$total_perceived_ease_of_use), 2)))
#
# plot(density(dataset$total_intention_to_use), main="Density Plot: total_intention_to_use", ylab="Frequency", sub=paste("Skewness:", round(e1071::skewness(dataset$total_intention_to_use), 2)))
dataset_corr <- dataset %>%
rename( "Total Perceived Usefulness" = total_perceived_usefulness, "Total Perceived Ease of Use" = total_perceived_ease_of_use , "Total Intention to Use" = total_intention_to_use, "Total Time" = total_time , "Total Accuracy" = total_accuracy, "Precision" = precision)
corr <- round(cor(dataset_corr[,-1]), 1)
# Compute a matrix of correlation p-values
p.mat <- cor_pmat(dataset_corr[,-1])
# Visualize default
ggcorrplot(corr)
# Non significant correlations are barred
ggcorrplot(
corr,
p.mat = p.mat,
hc.order = TRUE,
type = "lower",
lab = TRUE
)
# Non significant correlation are white
ggcorrplot(
corr,
p.mat = p.mat,
hc.order = TRUE,
type = "lower",
lab = TRUE,
insig = "blank"
)
# Non significant correlation are present
ggcorrplot(
corr,
hc.order = TRUE,
type = "lower",
lab = TRUE,
)
chi_intention <- chisq.test(table(type_eye_tracking, total_intention_to_use))
attach(dataset)
chi_intention <- chisq.test(table(type_eye_tracking, total_intention_to_use))
chi_intention
chi_ease <- chisq.test(table(type_eye_tracking, total_perceived_ease_of_use))
chi_ease
chi_usefulness <- chisq.test(table(type_eye_tracking, total_perceived_usefulness))
chi_usefulness
chisq.tesst
?chisq.test
x <- c(total_intention_to_use, total_perceived_usefulness total_perceived_ease_of_use)
x <- c(total_intention_to_use, total_perceived_usefulness, total_perceived_ease_of_use)
chi_intention <- chisq.test(x)
chi_intention
chi_intention <- chisq.test(table(type_eye_tracking, total_intention_to_use))
chi_intention

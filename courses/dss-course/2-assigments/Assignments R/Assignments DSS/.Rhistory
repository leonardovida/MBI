line <- c("ciao come stai io bene e tu")
gsub()
?gsub()
map <- function(text) {
x <- text
gsub("[\r\n]", "", x)
strsplit(x, "")
}
x <- text
x
text <- c("aaa bbb ccc ddd abc d")
x <- text
x
x <- gsub("[\r\n]", "", x)
x
x <- strsplit(x, "")
x
x <- gsub("[\r\n]", "", x)
x <- text
x <- gsub("[\r\n]", "", x)
x_splitted <- strsplit(x, " ")
x_splitted
list_of_word <- list()
for (word in x_splitted) {
value <- 1
list_of_word[[word]] <- value
}
View(x_splitted)
value <- NULL
for (word in x_splitted) {
value <- 1
list_of_word[[word]] <- value
}
value <- 1
list_of_word[[word]] <- value
for (i:length(x_splitted)) {
word <- x_xplitted[i]
value <- 1
list_of_word[[word]] <- value
}
x_splitted
#for-loop to assign value 1 to each word in the text
for (i:length(x_splitted)) {
word <- x_xplitted[i]
value <- 1
list_of_word[[word]] <- value
}
text <- c("aaa bbb ccc ddd abc d")
x <- text
x <- gsub("[\r\n]", "", x)
x_splitted <- data.frame(strsplit(x, " "))
x_splitted
x_splitted[2]
x_splitted[2,1]
list_of_word <- list()
value <- NULL
#for-loop to assign value 1 to each word in the text
for (i in 1:length(x_splitted)) {
word <- x_xplitted[i,1]
value <- 1
list_of_word[[word]] <- value
}
#for-loop to assign value 1 to each word in the text
for (i in 1:length(x_splitted)) {
word <- x_splitted[i,1]
value <- 1
list_of_word[[word]] <- value
}
list_of_word
list_of_word <- NULL
#for-loop to assign value 1 to each word in the text
for (i in 1:length(x_splitted)) {
word <- x_splitted[i,1]
value <- 1
list_of_word[[word]] <- value
}
list_of_word
list_of_word[aaa]
list_of_word["aaa]
list_of_word["aaa"]
list_of_word["aaa"]
list_of_word["bbb"]
list_of_word[[bbb]
list_of_word[[bbb]]
list_of_word[["bbb"]]
list_of_word <- matrix(ncol = 2, nrow = length(x_splitted))
#for-loop to assign value 1 to each word in the text
for (i in 1:length(x_splitted)) {
word <- x_splitted[i,1]
value <- 1
list_of_word[[word]] <- value
}
list_of_word
x_splitted <- strsplit(x, " ")
vector_split <- null
vector_split <- NULL
for (key in x_splitted) {
vector_split <- c(vector_split, key)
}
vector_split
vector_split[2]
vector_split[3]
#for-loop to assign value 1 to each word in the text
for (i in 1:length(vector_split)) {
word <- x_splitted[i]
value <- 1
list_of_word[[word]] <- value
}
library(dict)
values <- NULL
#for-loop to assign value 1 to each word in the text
for (i in 1:length(vector_split)) {
values <- (values,1)
}
for (i in 1:length(vector_split)) {
values <- (values,1)
}
#for-loop to assign value 1 to each word in the text
for (i in 1:length(vector_split)) {
values <- c(values,1)
}
values
list_of_word <- cbind(vector_split,values)
list_of_word
total <- 0
last_key <- NULL
text <- c("aaa aaa bbb ccc ddd d abc d")
map <- function(text) {
x <- text
#remove new lines and carriage return
x <- gsub("[\r\n]", "", x)
#split the text on blank spaces
x_splitted <- strsplit(x, " ")
vector_split <- NULL
for (key in x_splitted) {
vector_split <- c(vector_split, key)
}
values <- NULL
#for-loop to create vector of lenght "vector word" with values 1
for (i in 1:length(vector_split)) {
values <- c(values,1)
}
#concatenate two vector to create matrix - using a dictionary would be easier
list_of_word <- cbind(vector_split,values)
}
list_of_word
text <- c("aaa aaa bbb ccc ddd d abc d")
map <- function(text) {
x <- text
#remove new lines and carriage return
x <- gsub("[\r\n]", "", x)
#split the text on blank spaces
x_splitted <- strsplit(x, " ")
vector_split <- NULL
for (key in x_splitted) {
vector_split <- c(vector_split, key)
}
values <- NULL
#for-loop to create vector of lenght "vector word" with values 1
for (i in 1:length(vector_split)) {
values <- c(values,1)
}
#concatenate two vector to create matrix - using a dictionary would be easier
list_of_word <- cbind(vector_split,values)
}
list_of_word
map <- function(text) {
x <- text
#remove new lines and carriage return
x <- gsub("[\r\n]", "", x)
#split the text on blank spaces
x_splitted <- strsplit(x, " ")
vector_split <- NULL
for (key in x_splitted) {
vector_split <- c(vector_split, key)
}
values <- NULL
#for-loop to create vector of lenght "vector word" with values 1
for (i in 1:length(vector_split)) {
values <- c(values,1)
}
#concatenate two vector to create matrix - using a dictionary would be easier
list_of_word <- cbind(vector_split,values)
}
text <- c("aaa aaa bbb ccc ddd d abc d")
x <- text
x <- gsub("[\r\n]", "", x)
x_splitted <- strsplit(x, " ")
vector_split <- NULL
for (key in x_splitted) {
vector_split <- c(vector_split, key)
}
values <- NULL
#for-loop to create vector of lenght "vector word" with values 1
for (i in 1:length(vector_split)) {
values <- c(values,1)
}
#concatenate two vector to create matrix - using a dictionary would be easier
list_of_word <- cbind(vector_split,values)
list_of_word
vector_split <- order(vector_split)
values <- NULL
#for-loop to create vector of lenght "vector word" with values 1
for (i in 1:length(vector_split)) {
values <- c(values,1)
}
list_of_word <- cbind(vector_split,values)
vector_split <- order(vector_split)
list_of_word
map <- function(text) {
x <- text
#remove new lines and carriage return
x <- gsub("[\r\n]", "", x)
#split the text on blank spaces
x_splitted <- strsplit(x, " ")
vector_split <- NULL
for (key in x_splitted) {
vector_split <- c(vector_split, key)
vector_split <- order(vector_split)
}
values <- NULL
#for-loop to create vector of lenght "vector word" with values 1
for (i in 1:length(vector_split)) {
values <- c(values,1)
}
#concatenate two vector to create matrix - using a dictionary would be easier
list_of_word <- cbind(vector_split,values)
}
list_of_word
map <- function(text) {
x <- text
#remove new lines and carriage return
x <- gsub("[\r\n]", "", x)
#split the text on blank spaces
x_splitted <- strsplit(x, " ")
vector_split <- NULL
for (key in x_splitted) {
vector_split <- c(vector_split, key)
vector_split <- sort(vector_split)
}
values <- NULL
#for-loop to create vector of lenght "vector word" with values 1
for (i in 1:length(vector_split)) {
values <- c(values,1)
}
#concatenate two vector to create matrix - using a dictionary would be easier
list_of_word <- cbind(vector_split,values)
}
list()
list_of_word
text <- c("aaa aaa bbb ccc ddd d abc d")
map <- function(text) {
x <- text
#remove new lines and carriage return
x <- gsub("[\r\n]", "", x)
#split the text on blank spaces
x_splitted <- strsplit(x, " ")
vector_split <- NULL
for (key in x_splitted) {
vector_split <- c(vector_split, key)
vector_split <- sort(vector_split)
}
values <- NULL
#for-loop to create vector of lenght "vector word" with values 1
for (i in 1:length(vector_split)) {
values <- c(values,1)
}
#concatenate two vector to create matrix - using a dictionary would be easier
list_of_word <- cbind(vector_split,values)
}
list_of_word
map <- function(text) {
x <- text
#remove new lines and carriage return
x <- gsub("[\r\n]", "", x)
#split the text on blank spaces
x_splitted <- strsplit(x, " ")
vector_split <- NULL
for (key in x_splitted) {
vector_split <- c(vector_split, key)
vector_split <- sort(vector_split)
}
values <- NULL
#for-loop to create vector of lenght "vector word" with values 1
for (i in 1:length(vector_split)) {
values <- c(values,1)
}
#concatenate two vector to create matrix - using a dictionary would be easier
list_of_word <- cbind(vector_split,values)
}
x <- text
map(text)
x <- gsub("[\r\n]", "", x)
x_splitted <- strsplit(x, " ")
vector_split <- NULL
for (key in x_splitted) {
vector_split <- c(vector_split, key)
vector_split <- sort(vector_split)
}
vector_split <- c(vector_split, key)
vector_split <- sort(vector_split)
vector_split
values <- NULL
#for-loop to create vector of lenght "vector word" with values 1
for (i in 1:length(vector_split)) {
values <- c(values,1)
}
list_of_word <- cbind(vector_split,values)
list_of_word
text <- c("aaa aaa bbb ccc ddd d abc d")
x <- text
x <- gsub("[\r\n]", "", x)
x_splitted <- strsplit(x, " ")
vector_split <- NULL
for (key in x_splitted) {
vector_split <- c(vector_split, key)
}
vector_split <- sort(vector_split)
vector_split
vector_split <- sort(vector_split)
values <- NULL
#for-loop to create vector of lenght "vector word" with values 1
for (i in 1:length(vector_split)) {
values <- c(values,1)
}
#concatenate two vector to create matrix - using a dictionary would be easier
list_of_word <- cbind(vector_split,values)
list_of_word
this_row <- NULL
this_key <- NULL
last_key <- NULL
running_total <- NULL
value <- NULL
for (each in 1:nrow(matrix)) {
this_key <- matrix[i,1]
if (this_key == matrix[i,1]) {
running_total = c(running_total + value)
matrix[i,]
} else {
if (this_key != last_key) {
print(this_key)
}
}
last_key <- this_key
}
for (each in 1:nrow(list_of_word)) {
this_key <- matrix[i,1]
if (this_key == matrix[i,1]) {
running_total = c(running_total + value)
matrix[i,]
} else {Ã¹
if (this_key != last_key) {
print(this_key)
}
}
last_key <- this_key
}
matrix <- list_of_word
for (each in 1:nrow(list_of_word)) {
matrix <- list_of_word
this_key <- matrix[i,1]
if (this_key == matrix[i,1]) {
running_total = c(running_total + value)
matrix[i,]
} else {Ã¹
if (this_key != last_key) {
print(this_key)
}
}
last_key <- this_key
}
last_key
for (each in 1:nrow(list_of_word)) {
matrix <- list_of_word
this_key <- matrix[i,1]
if (this_key == matrix[i,1]) {
running_total = c(running_total + matrix[i,1])
matrix[i,1] <- matrix[i,running_total]
} else {
if (this_key != last_key) {
print(this_key)
}
}
last_key <- this_key
}
for (each in 1:nrow(list_of_word)) {
matrix <- list_of_word
this_key <- matrix[i,1]
if (this_key == matrix[i,1]) {
running_total = c(running_total + matrix[i,2])
matrix[i,1] <- matrix[i,running_total]
} else {
if (this_key != last_key) {
print(this_key)
}
}
last_key <- this_key
}
running_total = running_total + matrix[i,2]
reduce <- function(list_of_word) {
this_row <- NULL
this_key <- NULL
last_key <- NULL
running_total <- NULL
value <- NULL
for (each in 1:nrow(list_of_word)) {
matrix <- list_of_word
print(each)
this_key <- each
if (this_key == matrix[i,1]) {
running_total = (running_total + matrix[i,2])
matrix[i,1] <- matrix[i,running_total]
} else {
if (this_key != last_key) {
print(this_key)
}
}
last_key <- this_key
}
}
each
list_of_word
reduce <- function(list_of_word) {
this_row <- NULL
this_key <- NULL
last_key <- NULL
running_total <- NULL
value <- NULL
for (each in 1:nrow(list_of_word)) {
matrix <- list_of_word
print(each)
this_key <- each
if (this_key == matrix[i,1]) {
running_total = (running_total + matrix[i,2])
matrix[i,1] <- matrix[i,running_total]
} else {
if (this_key != last_key) {
print(this_key)
}
}
last_key <- this_key
}
}
this_row <- NULL
this_key <- NULL
last_key <- NULL
running_total <- NULL
value <- NULL
for (each in 1:nrow(list_of_word)) {
matrix <- list_of_word
print(each)
this_key <- each
if (this_key == matrix[i,1]) {
running_total = (running_total + matrix[i,2])
matrix[i,1] <- matrix[i,running_total]
} else {
if (this_key != last_key) {
print(this_key)
}
}
last_key <- this_key
}
if (this_key == matrix[i,1]) {
running_total = (running_total + matrix[i,2])
matrix[i,1] <- matrix[i,running_total]
} else {
if (this_key != last_key) {
print(this_key)
}
}
print(each)
matrix <- list_of_word
library('rhdfs')
library('rmr2')
install.packages("rhdfs")
install.packages("rmr2")
